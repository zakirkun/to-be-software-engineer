version: '3.8'

services:
  backend_app:
    container_name: backend_app
    build:
      context: .
      dockerfile: Dockerfile.app
    ports:
      - "9000:9000"
    restart: always
    links:
      - db
      - cache
      - rabbitmq
    networks:
    - infrastructure
  listener_payment:
    container_name: listener_payment
    build:
      context: .
      dockerfile: Dockerfile.payment
    restart: always
    links:
      - db
      - rabbitmq
    networks:
    - infrastructure
  listener_email:
    container_name: listener_email
    build:
      context: .
      dockerfile: Dockerfile.email
    restart: always
    links:
      - rabbitmq
    networks:
    - infrastructure
  db:
    image: mysql:8.0.38
    container_name: db
    restart: always
    environment:
      MYSQL_ROOT_HOST: "%"
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: toko_online
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      TZ: "Asia/Jakarta"
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
    - infrastructure
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 3
      
  cache:
    image: redis:alpine
    container_name: cache
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes: 
      - cache:/data
    networks:
      - infrastructure
      
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    networks:
    - infrastructure
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - infrastructure

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.9
    container_name: logstash
    volumes:
      - ./deploy/elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5000:5000"
    networks:
      - infrastructure
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - infrastructure
    depends_on:
      - elasticsearch
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - infrastructure

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    restart: unless-stopped
    networks:
      - infrastructure

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - infrastructure
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./deploy/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - infrastructure
      
volumes:
  mysql_data:
  cache:
  grafana-storage:

networks:
  infrastructure:
    driver: bridge